{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/lagz0ne/prisma-view/pkgs/server/pages/index.tsx\";\nimport dynamic from \"next/dynamic\";\nvar Diagram = dynamic(_c = function _c() {\n  return import(\"../client/Diagram\");\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"../client/Diagram\")];\n    },\n    modules: [\"../client/Diagram\"]\n  }\n});\n_c2 = Diagram;\nexport var __N_SSP = true;\nexport default function Home(_ref) {\n  var schema = _ref.schema,\n      dmmf = _ref.dmmf;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: JSON.stringify(dmmf)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_c3 = Home;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Diagram$dynamic\");\n$RefreshReg$(_c2, \"Diagram\");\n$RefreshReg$(_c3, \"Home\");","map":{"version":3,"sources":["/home/lagz0ne/prisma-view/pkgs/server/pages/index.tsx"],"names":["dynamic","Diagram","ssr","Home","schema","dmmf","JSON","stringify"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,cAApB;AAEA,IAAMC,OAAO,GAAGD,OAAO,MAAC;AAAA,SAAM,OAAO,mBAAP,CAAN;AAAA,CAAD,EAAoC;AAAEE,EAAAA,GAAG,EAAE,KAAP;AAAA;AAAA;AAAA,kCAAtB,mBAAsB;AAAA;AAAA,cAAtB,mBAAsB;AAAA;AAAA,CAApC,CAAvB;MAAMD,O;;AAEN,eAAe,SAASE,IAAT,OAAgC;AAAA,MAAhBC,MAAgB,QAAhBA,MAAgB;AAAA,MAARC,IAAQ,QAARA,IAAQ;AAC7C,sBACE;AAAA,2BACE;AAAA,gBAAMC,IAAI,CAACC,SAAL,CAAeF,IAAf;AAAN;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD;MANuBF,I","sourcesContent":["import dynamic from \"next/dynamic\";\n\nconst Diagram = dynamic(() => import(\"../client/Diagram\"), { ssr: false });\n\nexport default function Home({ schema, dmmf }) {\n  return (\n    <>\n      <div>{JSON.stringify(dmmf)}</div>\n    </>\n  );\n}\n\nimport { getDMMF, getConfig, formatSchema } from \"@prisma/sdk\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nconst schemaPath = path.resolve(process.cwd(), \"schema.prisma\");\n\nexport async function getServerSideProps() {\n  // const formatedSchemaString = await formatSchema({schemaPath});\n  const schema = fs.readFileSync(schemaPath, \"utf-8\");\n  const dmmf = await getDMMF({ datamodel: schema });\n\n  return {\n    props: {\n      schema,\n      dmmf,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}